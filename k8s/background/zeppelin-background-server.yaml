#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{zeppelin.k8s.background.name}}-conf
data:
  # 'serviceDomain' is a Domain name to use for accessing Zeppelin UI.
  # Should point IP address of 'zeppelin-server' service.
  #
  # Wildcard subdomain need to be point the same IP address to access service inside of Pod (such as SparkUI).
  # i.e. if service domain is 'local.zeppelin-project.org', DNS configuration should make 'local.zeppelin-project.org' and '*.local.zeppelin-project.org' point the same address.
  #
  # Default value is 'local.zeppelin-project.org' while it points 127.0.0.1 and `kubectl port-forward zeppelin-server` will give localhost to connects.
  # If you have your ingress controller configured to connect to `zeppelin-server` service and have a domain name for it (with wildcard subdomain point the same address), you can replace serviceDomain field with your own domain.
  serviceDomain: local.zeppelin-project.org:8080
  sparkContainerImage: spark:2.4.0
  redisAddr: zeppelin-serving-metric-redis.default.svc.cluster.local # metric storage
---
apiVersion: {{zeppelin.k8s.background.resource.apiversion}}
kind: {{zeppelin.k8s.background.resource.type}}
metadata:
  namespace: {{zeppelin.k8s.background.namespace}}
  name: {{zeppelin.k8s.background.name}}
  labels:
    taskType: {{zeppelin.k8s.background.type}}
spec:
{% if zeppelin.k8s.background.resource.type == "Deployment" %}
  selector:
    matchLabels:
      app: {{zeppelin.k8s.background.name}}
  replicas: 1
  template:
    metadata:
      labels:
        app: {{zeppelin.k8s.background.name}}
    spec:
{% endif %}
{% if zeppelin.k8s.background.resource.type == "Job" %}
  backoffLimit: 1
  activeDeadlineSeconds: 3600
  template:
    metadata:
      labels:
        app: {{zeppelin.k8s.background.name}}
    spec:
      restartPolicy: Never
{% endif %}
      automountServiceAccountToken: true
      containers:
      - name: zeppelin-server
        image: apache/zeppelin:0.9.0-SNAPSHOT
        command: ["sh", "-c", "$(ZEPPELIN_HOME)/bin/zeppelin.sh"]
        lifecycle:
          preStop:
            exec:
              # SIGTERM triggers a quick exit; gracefully terminate instead
              command: ["sh", "-c", "ps -ef | grep org.apache.zeppelin.server.ZeppelinServer | grep -v grep | awk '{print $2}' | xargs kill"]
        env:
        - name: ZEPPELIN_K8S_CONTAINER_IMAGE
          value: apache/zeppelin:0.9.0-SNAPSHOT
        - name: ZEPPELIN_HOME
          value: /zeppelin
        - name: ZEPPELIN_SERVER_RPC_PORTRANGE
          value: 12320:12320
        - name: POD_UID
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.uid
        - name: POD_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.name
        - name: SERVICE_NAME
          value: {{zeppelin.k8s.background.name}}
        - name: ZEPPELIN_K8S_SPARK_CONTAINER_IMAGE
          valueFrom:
            configMapKeyRef:
              name: {{zeppelin.k8s.background.name}}-conf
              key: sparkContainerImage
        - name: SERVICE_DOMAIN
          valueFrom:
            configMapKeyRef:
              name: {{zeppelin.k8s.background.name}}-conf
              key: serviceDomain
        - name: ZEPPELIN_INTERPRETER_METRIC_REDIS_ADDR
          value: "{{zeppelin.k8s.serving.metric.redis.addr}}"
        - name: ZEPPELIN_NOTEBOOK_DIR
          value: "{{zeppelin.k8s.background.notebook.dir}}"
        - name: ZEPPELIN_NOTEBOOK_RUN_ID
          value: "{{zeppelin.k8s.background.noteId}}"
        - name: ZEPPELIN_NOTEBOOK_RUN_REV
          value: "{{zeppelin.k8s.background.revId}}"
        - name: ZEPPELIN_NOTEBOOK_RUN_SERVICE_CONTEXT
          value: "{{zeppelin.k8s.background.serviceContext}}"
        - name: ZEPPELIN_NOTEBOOK_RUN_AUTOSHUTDOWN
          value: "{{zeppelin.k8s.background.autoshutdown}}"
        - name: MASTER   # default value of master property for spark interpreter.
          value: "k8s://https://kubernetes.default.svc"
        - name: ZEPPELIN_BACKGROUND_TYPE
          value: "{{zeppelin.k8s.background.type}}"
        volumeMounts:
          - name: zeppelin-task-context-volume
            mountPath: /zeppelin/task
      volumes:
      - name: zeppelin-task-context-volume
        persistentVolumeClaim:
          claimName: task-context-volume-claim
---
kind: Service
apiVersion: v1
metadata:
  name: {{zeppelin.k8s.background.name}}    # keep Service name the same to Pod name.
spec:
  ports:
    - name: http
      port: 80
    - name: rpc            # port name is referenced in the code. So it shouldn't be changed.
      port: 12320
  selector:
    app: {{zeppelin.k8s.background.name}}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{zeppelin.k8s.background.name}}-role
rules:
- apiGroups: [""]
  resources: ["pods", "services"]
  verbs: ["create", "get", "update", "patch", "list", "delete", "watch"]
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["roles", "rolebindings"]
  verbs: ["bind", "create", "get", "update", "patch", "list", "delete", "watch"]
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: {{zeppelin.k8s.background.name}}-role-binding
subjects:
- kind: ServiceAccount
  name: default
roleRef:
  kind: Role
  name: {{zeppelin.k8s.background.name}}-role
  apiGroup: rbac.authorization.k8s.io
