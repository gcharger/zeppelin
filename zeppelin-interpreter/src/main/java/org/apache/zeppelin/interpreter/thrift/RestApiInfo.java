/**
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.zeppelin.interpreter.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2019-04-19")
public class RestApiInfo implements org.apache.thrift.TBase<RestApiInfo, RestApiInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RestApiInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RestApiInfo");

  private static final org.apache.thrift.protocol.TField INTP_GROUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("intpGroupId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NOTE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("noteId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ENDPOINT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("endpointName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SERVER_PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("serverPort", org.apache.thrift.protocol.TType.I32, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RestApiInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RestApiInfoTupleSchemeFactory());
  }

  public String intpGroupId; // required
  public String noteId; // required
  public String endpointName; // required
  public String hostname; // required
  public int serverPort; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    INTP_GROUP_ID((short)1, "intpGroupId"),
    NOTE_ID((short)2, "noteId"),
    ENDPOINT_NAME((short)3, "endpointName"),
    HOSTNAME((short)4, "hostname"),
    SERVER_PORT((short)5, "serverPort");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // INTP_GROUP_ID
          return INTP_GROUP_ID;
        case 2: // NOTE_ID
          return NOTE_ID;
        case 3: // ENDPOINT_NAME
          return ENDPOINT_NAME;
        case 4: // HOSTNAME
          return HOSTNAME;
        case 5: // SERVER_PORT
          return SERVER_PORT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SERVERPORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.INTP_GROUP_ID, new org.apache.thrift.meta_data.FieldMetaData("intpGroupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOTE_ID, new org.apache.thrift.meta_data.FieldMetaData("noteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ENDPOINT_NAME, new org.apache.thrift.meta_data.FieldMetaData("endpointName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SERVER_PORT, new org.apache.thrift.meta_data.FieldMetaData("serverPort", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RestApiInfo.class, metaDataMap);
  }

  public RestApiInfo() {
  }

  public RestApiInfo(
    String intpGroupId,
    String noteId,
    String endpointName,
    String hostname,
    int serverPort)
  {
    this();
    this.intpGroupId = intpGroupId;
    this.noteId = noteId;
    this.endpointName = endpointName;
    this.hostname = hostname;
    this.serverPort = serverPort;
    setServerPortIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RestApiInfo(RestApiInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetIntpGroupId()) {
      this.intpGroupId = other.intpGroupId;
    }
    if (other.isSetNoteId()) {
      this.noteId = other.noteId;
    }
    if (other.isSetEndpointName()) {
      this.endpointName = other.endpointName;
    }
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    this.serverPort = other.serverPort;
  }

  public RestApiInfo deepCopy() {
    return new RestApiInfo(this);
  }

  @Override
  public void clear() {
    this.intpGroupId = null;
    this.noteId = null;
    this.endpointName = null;
    this.hostname = null;
    setServerPortIsSet(false);
    this.serverPort = 0;
  }

  public String getIntpGroupId() {
    return this.intpGroupId;
  }

  public RestApiInfo setIntpGroupId(String intpGroupId) {
    this.intpGroupId = intpGroupId;
    return this;
  }

  public void unsetIntpGroupId() {
    this.intpGroupId = null;
  }

  /** Returns true if field intpGroupId is set (has been assigned a value) and false otherwise */
  public boolean isSetIntpGroupId() {
    return this.intpGroupId != null;
  }

  public void setIntpGroupIdIsSet(boolean value) {
    if (!value) {
      this.intpGroupId = null;
    }
  }

  public String getNoteId() {
    return this.noteId;
  }

  public RestApiInfo setNoteId(String noteId) {
    this.noteId = noteId;
    return this;
  }

  public void unsetNoteId() {
    this.noteId = null;
  }

  /** Returns true if field noteId is set (has been assigned a value) and false otherwise */
  public boolean isSetNoteId() {
    return this.noteId != null;
  }

  public void setNoteIdIsSet(boolean value) {
    if (!value) {
      this.noteId = null;
    }
  }

  public String getEndpointName() {
    return this.endpointName;
  }

  public RestApiInfo setEndpointName(String endpointName) {
    this.endpointName = endpointName;
    return this;
  }

  public void unsetEndpointName() {
    this.endpointName = null;
  }

  /** Returns true if field endpointName is set (has been assigned a value) and false otherwise */
  public boolean isSetEndpointName() {
    return this.endpointName != null;
  }

  public void setEndpointNameIsSet(boolean value) {
    if (!value) {
      this.endpointName = null;
    }
  }

  public String getHostname() {
    return this.hostname;
  }

  public RestApiInfo setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getServerPort() {
    return this.serverPort;
  }

  public RestApiInfo setServerPort(int serverPort) {
    this.serverPort = serverPort;
    setServerPortIsSet(true);
    return this;
  }

  public void unsetServerPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
  }

  /** Returns true if field serverPort is set (has been assigned a value) and false otherwise */
  public boolean isSetServerPort() {
    return EncodingUtils.testBit(__isset_bitfield, __SERVERPORT_ISSET_ID);
  }

  public void setServerPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SERVERPORT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case INTP_GROUP_ID:
      if (value == null) {
        unsetIntpGroupId();
      } else {
        setIntpGroupId((String)value);
      }
      break;

    case NOTE_ID:
      if (value == null) {
        unsetNoteId();
      } else {
        setNoteId((String)value);
      }
      break;

    case ENDPOINT_NAME:
      if (value == null) {
        unsetEndpointName();
      } else {
        setEndpointName((String)value);
      }
      break;

    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case SERVER_PORT:
      if (value == null) {
        unsetServerPort();
      } else {
        setServerPort((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case INTP_GROUP_ID:
      return getIntpGroupId();

    case NOTE_ID:
      return getNoteId();

    case ENDPOINT_NAME:
      return getEndpointName();

    case HOSTNAME:
      return getHostname();

    case SERVER_PORT:
      return getServerPort();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case INTP_GROUP_ID:
      return isSetIntpGroupId();
    case NOTE_ID:
      return isSetNoteId();
    case ENDPOINT_NAME:
      return isSetEndpointName();
    case HOSTNAME:
      return isSetHostname();
    case SERVER_PORT:
      return isSetServerPort();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RestApiInfo)
      return this.equals((RestApiInfo)that);
    return false;
  }

  public boolean equals(RestApiInfo that) {
    if (that == null)
      return false;

    boolean this_present_intpGroupId = true && this.isSetIntpGroupId();
    boolean that_present_intpGroupId = true && that.isSetIntpGroupId();
    if (this_present_intpGroupId || that_present_intpGroupId) {
      if (!(this_present_intpGroupId && that_present_intpGroupId))
        return false;
      if (!this.intpGroupId.equals(that.intpGroupId))
        return false;
    }

    boolean this_present_noteId = true && this.isSetNoteId();
    boolean that_present_noteId = true && that.isSetNoteId();
    if (this_present_noteId || that_present_noteId) {
      if (!(this_present_noteId && that_present_noteId))
        return false;
      if (!this.noteId.equals(that.noteId))
        return false;
    }

    boolean this_present_endpointName = true && this.isSetEndpointName();
    boolean that_present_endpointName = true && that.isSetEndpointName();
    if (this_present_endpointName || that_present_endpointName) {
      if (!(this_present_endpointName && that_present_endpointName))
        return false;
      if (!this.endpointName.equals(that.endpointName))
        return false;
    }

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_serverPort = true;
    boolean that_present_serverPort = true;
    if (this_present_serverPort || that_present_serverPort) {
      if (!(this_present_serverPort && that_present_serverPort))
        return false;
      if (this.serverPort != that.serverPort)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_intpGroupId = true && (isSetIntpGroupId());
    list.add(present_intpGroupId);
    if (present_intpGroupId)
      list.add(intpGroupId);

    boolean present_noteId = true && (isSetNoteId());
    list.add(present_noteId);
    if (present_noteId)
      list.add(noteId);

    boolean present_endpointName = true && (isSetEndpointName());
    list.add(present_endpointName);
    if (present_endpointName)
      list.add(endpointName);

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_serverPort = true;
    list.add(present_serverPort);
    if (present_serverPort)
      list.add(serverPort);

    return list.hashCode();
  }

  @Override
  public int compareTo(RestApiInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetIntpGroupId()).compareTo(other.isSetIntpGroupId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIntpGroupId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.intpGroupId, other.intpGroupId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNoteId()).compareTo(other.isSetNoteId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNoteId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.noteId, other.noteId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetEndpointName()).compareTo(other.isSetEndpointName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndpointName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpointName, other.endpointName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetServerPort()).compareTo(other.isSetServerPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetServerPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverPort, other.serverPort);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RestApiInfo(");
    boolean first = true;

    sb.append("intpGroupId:");
    if (this.intpGroupId == null) {
      sb.append("null");
    } else {
      sb.append(this.intpGroupId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("noteId:");
    if (this.noteId == null) {
      sb.append("null");
    } else {
      sb.append(this.noteId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("endpointName:");
    if (this.endpointName == null) {
      sb.append("null");
    } else {
      sb.append(this.endpointName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("serverPort:");
    sb.append(this.serverPort);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RestApiInfoStandardSchemeFactory implements SchemeFactory {
    public RestApiInfoStandardScheme getScheme() {
      return new RestApiInfoStandardScheme();
    }
  }

  private static class RestApiInfoStandardScheme extends StandardScheme<RestApiInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RestApiInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // INTP_GROUP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.intpGroupId = iprot.readString();
              struct.setIntpGroupIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NOTE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.noteId = iprot.readString();
              struct.setNoteIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ENDPOINT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.endpointName = iprot.readString();
              struct.setEndpointNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SERVER_PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.serverPort = iprot.readI32();
              struct.setServerPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RestApiInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.intpGroupId != null) {
        oprot.writeFieldBegin(INTP_GROUP_ID_FIELD_DESC);
        oprot.writeString(struct.intpGroupId);
        oprot.writeFieldEnd();
      }
      if (struct.noteId != null) {
        oprot.writeFieldBegin(NOTE_ID_FIELD_DESC);
        oprot.writeString(struct.noteId);
        oprot.writeFieldEnd();
      }
      if (struct.endpointName != null) {
        oprot.writeFieldBegin(ENDPOINT_NAME_FIELD_DESC);
        oprot.writeString(struct.endpointName);
        oprot.writeFieldEnd();
      }
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SERVER_PORT_FIELD_DESC);
      oprot.writeI32(struct.serverPort);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RestApiInfoTupleSchemeFactory implements SchemeFactory {
    public RestApiInfoTupleScheme getScheme() {
      return new RestApiInfoTupleScheme();
    }
  }

  private static class RestApiInfoTupleScheme extends TupleScheme<RestApiInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RestApiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetIntpGroupId()) {
        optionals.set(0);
      }
      if (struct.isSetNoteId()) {
        optionals.set(1);
      }
      if (struct.isSetEndpointName()) {
        optionals.set(2);
      }
      if (struct.isSetHostname()) {
        optionals.set(3);
      }
      if (struct.isSetServerPort()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetIntpGroupId()) {
        oprot.writeString(struct.intpGroupId);
      }
      if (struct.isSetNoteId()) {
        oprot.writeString(struct.noteId);
      }
      if (struct.isSetEndpointName()) {
        oprot.writeString(struct.endpointName);
      }
      if (struct.isSetHostname()) {
        oprot.writeString(struct.hostname);
      }
      if (struct.isSetServerPort()) {
        oprot.writeI32(struct.serverPort);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RestApiInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.intpGroupId = iprot.readString();
        struct.setIntpGroupIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.noteId = iprot.readString();
        struct.setNoteIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endpointName = iprot.readString();
        struct.setEndpointNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.hostname = iprot.readString();
        struct.setHostnameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.serverPort = iprot.readI32();
        struct.setServerPortIsSet(true);
      }
    }
  }

}

